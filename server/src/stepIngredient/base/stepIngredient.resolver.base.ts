/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateStepIngredientArgs } from "./CreateStepIngredientArgs";
import { UpdateStepIngredientArgs } from "./UpdateStepIngredientArgs";
import { DeleteStepIngredientArgs } from "./DeleteStepIngredientArgs";
import { StepIngredientFindManyArgs } from "./StepIngredientFindManyArgs";
import { StepIngredientFindUniqueArgs } from "./StepIngredientFindUniqueArgs";
import { StepIngredient } from "./StepIngredient";
import { Ingredient } from "../../ingredient/base/Ingredient";
import { Step } from "../../step/base/Step";
import { StepIngredientService } from "../stepIngredient.service";

@graphql.Resolver(() => StepIngredient)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class StepIngredientResolverBase {
  constructor(
    protected readonly service: StepIngredientService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "StepIngredient",
    action: "read",
    possession: "any",
  })
  async _stepIngredientsMeta(
    @graphql.Args() args: StepIngredientFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [StepIngredient])
  @nestAccessControl.UseRoles({
    resource: "StepIngredient",
    action: "read",
    possession: "any",
  })
  async stepIngredients(
    @graphql.Args() args: StepIngredientFindManyArgs
  ): Promise<StepIngredient[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => StepIngredient, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "StepIngredient",
    action: "read",
    possession: "own",
  })
  async stepIngredient(
    @graphql.Args() args: StepIngredientFindUniqueArgs
  ): Promise<StepIngredient | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => StepIngredient)
  @nestAccessControl.UseRoles({
    resource: "StepIngredient",
    action: "create",
    possession: "any",
  })
  async createStepIngredient(
    @graphql.Args() args: CreateStepIngredientArgs
  ): Promise<StepIngredient> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        ingredient: {
          connect: args.data.ingredient,
        },

        step: {
          connect: args.data.step,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => StepIngredient)
  @nestAccessControl.UseRoles({
    resource: "StepIngredient",
    action: "update",
    possession: "any",
  })
  async updateStepIngredient(
    @graphql.Args() args: UpdateStepIngredientArgs
  ): Promise<StepIngredient | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          ingredient: {
            connect: args.data.ingredient,
          },

          step: {
            connect: args.data.step,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => StepIngredient)
  @nestAccessControl.UseRoles({
    resource: "StepIngredient",
    action: "delete",
    possession: "any",
  })
  async deleteStepIngredient(
    @graphql.Args() args: DeleteStepIngredientArgs
  ): Promise<StepIngredient | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Ingredient, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Ingredient",
    action: "read",
    possession: "any",
  })
  async ingredient(
    @graphql.Parent() parent: StepIngredient
  ): Promise<Ingredient | null> {
    const result = await this.service.getIngredient(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Step, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Step",
    action: "read",
    possession: "any",
  })
  async step(@graphql.Parent() parent: StepIngredient): Promise<Step | null> {
    const result = await this.service.getStep(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
